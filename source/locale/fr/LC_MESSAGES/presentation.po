# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Teclib'
# This file is distributed under the same license as the git-flow package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2016.
#
msgid ""
msgstr ""
"Project-Id-Version: git-flow 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-10-19 10:08+0200\n"
"PO-Revision-Date: 2016-10-19 10:09+0200\n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"
"Language: fr\n"
"X-Generator: Poedit 1.8.7.1\n"

#: ../../source/presentation.rst:2
msgid "Presentation"
msgstr "Présentation"

#: ../../source/presentation.rst:4
msgid ""
"`git-flow <http://nvie.com/posts/a-successful-git-branching-model/>`_ is a "
"branching model, which come along with some documentation, and a git plugin to "
"add command line facilities."
msgstr ""
"`git-flow <http://nvie.com/posts/a-successful-git-branching-model/>`_ est un "
"modèle de branche, qui est fourni avec de la documentation, et un plugin git "
"pour ajouter des commandes qui facilitent le travail."

#: ../../source/presentation.rst:9
msgid ""
"Keep in mind that it is just designed to get something standardized; all the "
"background use standard git commands, you can achieve \"manually\" everything "
"git-flow propose. It is just simplier to use, and it prevents to use the "
"incorect branch, or to forget about merging somewhere."
msgstr ""
"Gardez en tête qu'il s'agit de standardiser ; des commandes git standard sont "
"utilisées an arrière-plan, vous pourriez obtenir le même résultat « "
"manuellement » qu'avec git-flow. C'est juste plus simple à utiliser, et ça "
"évite d'utiliser la mauvaise branche, ou d'oublier de merger quelque part."

#: ../../source/presentation.rst:11
msgid ""
"It is not the goal of the present documentation to list pros and cons of this "
"model, we'll note that it is not designed to get long running support branches, "
"it has been once something that would have been implemented; but it has not "
"been done."
msgstr ""
"Le but de la présente documentation n'est pas de lister les pour et les contre "
"de ce modèle, on notera simplement qu'il n'est pas prévu pour fournir des "
"branches de support à long terme, c'est quelque chose qui avait été évoqué mais "
"qui n'a finalement jamais été implémenté."

#: ../../source/presentation.rst:13
msgid "According to the semantic `versionning rules <http://semver.org>`_:"
msgstr "D'après les `règles de versionnage sémantiques <http://semver.org>`_ :"

#: ../../source/presentation.rst:15
msgid "you'll add ``features`` only for *major* or *minor* versions,"
msgstr ""
"vous ajouterez des ``features`` pour les versions *majeures* et *mineures* "
"uniquement,"

#: ../../source/presentation.rst:16
msgid "you'll ``release`` *major* or *minor* versions,"
msgstr "vous créerez des ``release`` pour des versions *majeures* ou *mineures*,"

#: ../../source/presentation.rst:17
msgid "you'll ``hotfix`` *patch* versions."
msgstr "vous créerez des ``hotfix`` pour les versions *patch*."

#: ../../source/presentation.rst:20
msgid "Conventions"
msgstr "Conventions"

#: ../../source/presentation.rst:22
msgid "The present documentation assumes that:"
msgstr "La présente documentation part du principe que :"

#: ../../source/presentation.rst:24
msgid "a ``$`` sign will precede each command line instructions,"
msgstr "un signe ``$`` précèdera toute instruction en ligne de commande,"

#: ../../source/presentation.rst:25
msgid ""
"any term beetween ``()`` before the ``$`` sign is the name of the current "
"branch,"
msgstr ""
"tout terme entre ``()`` avant le signe ``$`` représente le nom de la branche "
"courante,"

#: ../../source/presentation.rst:26
msgid "all is driven from the command line (I do not use any git GUI anyways)."
msgstr ""
"tout est fait depuis la ligne de commande (je n'utilise pas d'interface "
"graphique pour git de toutes façons)."

#: ../../source/presentation.rst:29
msgid "Pre-requisites"
msgstr "Pré-requis"

#: ../../source/presentation.rst:31
msgid ""
"In order the get the commands available; you'll have to install the `git-flow "
"git plugin <https://github.com/nvie/gitflow>`_."
msgstr ""
"Pour que les commandes soient disponibles, vous devrez installer `le plugin git "
"git-flow <https://github.com/nvie/gitflow>`_."

#: ../../source/presentation.rst:33
msgid ""
"Most of Linux distributions have it in their repositories (so ``yum install git-"
"flow`` or ``apt-get install git-flow`` would do the trick) or you can follow "
"the `installation instructions <https://github.com/nvie/gitflow/wiki/"
"Installation>`_ provided on the project wiki."
msgstr ""
"La majorité des distributions linux le fournissent dans leur dépôts (donc ``yum "
"install git-flow`` ou ``apt-get install git-flow`` devrait faire l'affaire) ou "
"vous pouvez suivre `les instructions d'installation <https://github.com/nvie/"
"gitflow/wiki/Installation>`_ depuis le wiki du projet."

#: ../../source/presentation.rst:35
msgid ""
"Many GIT software are aware of gitflow, or can be if you install a simple "
"plugin; check their respective documentation."
msgstr ""
"Beaucoup de logiciels GIT supportent git-flow, ou le peuvent par le biais de "
"plugins ; consultez les documentations respectives."

#: ../../source/presentation.rst:37
msgid ""
"If you use command line, there are numerous ways to get usefull informations "
"displayed in your prompt. While this is not a pre-requisite, it can help you "
"save time!"
msgstr ""
"Si vous utilisez la ligne de commande, il existe de nombreux moyens pour "
"afficher des informations utiles dans le prompt. Bien que ce ne soit pas un pré-"
"requis, cela peut vous faire gagner du temps !"

#: ../../source/presentation.rst:43
msgid "As an example, the ZSH git prompt I use"
msgstr "Par exemple, le prompt git ZSH que j'utilise"

#: ../../source/presentation.rst:48
msgid "Working with Github"
msgstr "Travailler avec Github"

#: ../../source/presentation.rst:50
msgid ""
"Each project will have a main repository hosted on Github. Even if you are part "
"of the core developers, you will use the main repository only to push changes "
"on the ``develop`` and ``master`` branches. All other branches will be created "
"on a fork (use the eponym button at the top of the project - see below) you "
"will create on your account."
msgstr ""
"Chaque projet aura un dépôt principal hébergé sur Github. Même si vous faites "
"partie des développeurs principaux, vous n'utiliserez le dépôt principal que "
"pour pousser les modifications des branches ``develop`` et ``master``. Toutes "
"les autres branches devront être créées sur un fork (utilisez le bouton éponyme "
"en haut de la page du projet - voir ci-dessous) que vous allez créer sur votre "
"compte."

#: ../../source/presentation.rst:56
msgid "The fork button"
msgstr "Le bouton fork"

#: ../../source/presentation.rst:62
msgid "The forked repo on my personnal account"
msgstr "Le dépôt forké sur mon compte personnel"

#: ../../source/presentation.rst:64
msgid ""
"From the main repository you've cloned the project to, add a new remote, let's "
"say naming as your github username (name does not matter, just remember what "
"you choose, and stay consistent accross projects). Replacing ``{github_username}"
"`` with your own username, run the following:"
msgstr ""
"Depuis votre copie de travail, ajoutez un nouveau remote, que vous nommerez par "
"exemple comme votre compte github (le nom n'a pas d'importance, il suffit que "
"vous vous en souveniez, et que vous restiez cohérent dans les autres projets). "
"En prenant soin de remplacer ``{github_username}`` avec votre propre nom "
"d'utilisateur, lancez :"

#: ../../source/presentation.rst:70
msgid ""
"All branchs you will create that must be reviewed will be pushed to your fork."
msgstr ""
"Toutes les branches que vous allez créer et qui doivent être revues seront "
"publiées sur votre fork."

#: ../../source/presentation.rst:73
msgid "Initialization"
msgstr "Initialisation"

#: ../../source/presentation.rst:75
msgid ""
"Initializing git-flow is quite simple, just clone the repository, go to the "
"``master`` branch and run:"
msgstr ""
"Initialiser git-flow est assez simple, clonez le dépôt, aller sur la branche "
"``master`` et lancez :"

#: ../../source/presentation.rst:79
msgid ""
"When you clone a git repository, the default branch will be checkout. In most "
"cases, it will be ``master``, but double check."
msgstr ""
"Quand vous clonez un dépôt git, la branche par défaut sera utilisée. Dans la "
"plupart des cas, ce sera ``master``, mais pensez à vérifier."

#: ../../source/presentation.rst:85
msgid ""
"You can assume the default answer is correct for all questions. If the "
"``develop`` branch already exists, it will be used, the process will create it "
"otherwise."
msgstr ""
"Vous pouvez considérer que les réponses par défaut sont toutes correctes. Si la "
"branche ``develop`` existe déjà, elle sera utilisée, le processus la créera "
"sinon."

#: ../../source/presentation.rst:88
msgid "Not finished process"
msgstr "Processus non terminé"

#: ../../source/presentation.rst:90
msgid ""
"On some occasions, a git-flow command may not finish (in case of conflict, for "
"exemple). This is really not a problem since its fully managed :)"
msgstr ""
"À certaines occasions, une commande git-flow peut ne pas se terminer (dans le "
"cas d'un conflit par exemple). Ce n'est pas un problème, puisque c'est "
"totalement géré :)"

#: ../../source/presentation.rst:92
msgid ""
"If a git-flow process is stopped, just fix the issue and run the same command "
"again. It will simply run all tasks remaining."
msgstr ""
"Si un processus git-flow est stoppé, corrigez simplement l'erreur et lancez la "
"même commande une fois de plus. Il lancera tout simplement les tâches restantes."

#: ../../source/presentation.rst:96
msgid ""
"To be sure everything worked as expected, always take a close look at the "
"ouptut!"
msgstr ""
"Pour vous assurez que tout a fonctionné correctement, regardez toujours "
"attentivement la sortie !"

#: ../../source/presentation.rst:101
msgid "merge vs rebase"
msgstr "merge vs rebase"

#: ../../source/presentation.rst:103
msgid "Should I merge or should I rebase? Well, it's up to you!"
msgstr "Faut-il utiliser merge ou rebase ? Hé bien, c'est à vous de voir !"

#: ../../source/presentation.rst:107
msgid ""
"Even if both solutions can be used, and you can choose one or another on some "
"cases; always remember that a ``rebase`` can be destructive! Keep that in mind."
msgstr ""
"Bien que les deux solutions puissent être utilisées, et que vous avez la "
"possibilité de choisir à chaque fois, n'oubliez pas qu'un ``rebase`` peut être "
"destructeur ! Gardez cela à l'esprit."

#: ../../source/presentation.rst:109
msgid ""
"In facts, you can repair a rebase issue, but only on your local workspace "
"(using ``reflog``). Note this is really something you should not use if you're "
"not a git expert ;)"
msgstr ""
"En fait, vous pouvez toujours corriger un rebase depuis votre copie de travail "
"locale (en utilisant ``reflog``). Notez cependant que c'est quelque chose que "
"vous ne devriez pas utiliser si vous n'êtes pas un expert git ;)"

#: ../../source/presentation.rst:111
msgid ""
"I do not want to feed any troll; both have pros and cons. My advice would be to "
"avoid merge commits when it is not required. I'll try to explain some common "
"cases, and the way I do manage them with the few following examples..."
msgstr ""
"Je ne souhaite nourrir aucun troll ; les deux possèdent leurs avantages et "
"leurs inconvénients. Mon conseil est d'éviter les commit de merge quand ils ne "
"sont pas utiles. Je vais essayer d'expliquer quelques cas de figure standard, "
"et la manière dont je les gère à travers les quelques exemples qui suivent..."

#: ../../source/presentation.rst:113
msgid ""
"You work on a `feature`; all that ends once squashed into one only commit. By "
"default, the git-flow process will add your commit on the ``develop`` branch "
"and will add an (empty) merge commit also. This one is really not required, it "
"only make history less readable. If the merge commit is not empty, this begin "
"to be more complicated; you probably miss a ``git flow feature rebase`` "
"somewhere."
msgstr ""
"Vous travaillez sur une `feature` ; tout a été concentré dans un seul et unique "
"commit. Par défaut, le processus git-flow process ajoutera votre commit sur la "
"branche ``develop`` et ajoutera un commit de merge (vide) également. Ce dernier "
"n'est vraiment pas utile, il rend juste l'historique moins lisible. Si le "
"commit de merge n'est pas vide, les choses commencent à se compliquer ; vous "
"avez probablement loupé un ``git flow feature rebase`` quelque part."

#: ../../source/presentation.rst:115 ../../source/presentation.rst:125
msgid "Conclusion: use **rebase**"
msgstr "Conclusion : utilisez **rebase**."

#: ../../source/presentation.rst:117
msgid ""
"You've added a hotfix, again one only commmit. git-flow will create merge "
"commits as well. For instance, I'm used to keep those commits, this is a visual "
"trace in the history of what has been done regarding bug fixes."
msgstr ""
"Vous avez ajouté un correctif, là encore un seul commit. git-flow créera "
"également des commits de fusion. Par exemple, j'ai l'habitude de garder ces "
"commits, c'est une trace visuelle dans l'historique de ce qui a été fait "
"concernant les corrections de bugs."

#: ../../source/presentation.rst:119
msgid "Conclusion: use **merge**"
msgstr "Conclusion : utilisez **merge**"

#: ../../source/presentation.rst:121
msgid ""
"You've finished a `feature`, just like someone else... But other side changes "
"have already been pushed to remote ``develop``. If you run ``(develop) $ git "
"push``, you will be informed that you cannot push because remote has changed."
msgstr ""
"Vous venez de terminer une `feature`, tout comme quelqu'un d'autre... Mais "
"l'autre a déjà poussé ses modifications sur la branche ``develop`` distante. Si "
"vous lancez un ``(develop) $ git push``, un message vous informera que vous ne "
"pouvez pousser car la branche distante a changé."

#: ../../source/presentation.rst:123
msgid ""
"I guess many will just run a ``(develop) $ git pull`` in that case, that will "
"add a merge commit in your history. Those merge commits are really annonying "
"searching in history, whether they're empty or not. As an alternative, you can "
"run ``(develop) $ git pull --rebase``, this will prevent the merge comit."
msgstr ""
"Je pense que beaucoup lanceront juste un ``(develop) $ git pull`` dans ce cas, "
"ce qui ajoutera un commit de merge dans l'historique. Ces commits de merge sont "
"vraiment pénibles quand on effectue une recherche dans l'historique, qu'ils "
"soient vides ou pas. Alternativement, vous pouvez lancer ``(develop) $ git pull "
"--rebase`` qui évitera le commit de merge."

#: ../../source/presentation.rst:131
msgid ""
"An example history (from the `mreporting plugin <https://github.com/pluginsGLPI/"
"mreporting/>`_)."
msgstr ""
"Un exemple d'historique (depuis le `plugin mreporting <https://github.com/"
"pluginsGLPI/mreporting/>`_)."

#: ../../source/presentation.rst:137
msgid "Another example history (from the `Galette project <http://galette.eu>`_)."
msgstr ""
"Un autre exemple d'historique (depuis le `projet Galette <http://galette.eu>`_)."

#: ../../source/presentation.rst:140
msgid "|ccbyncnd|"
msgstr "|ccbyncnd|"

#~ msgid "Conclusion: use **rebase**."
#~ msgstr "Conclusion : utilisez **rebase**."
